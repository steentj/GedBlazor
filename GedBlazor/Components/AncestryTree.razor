@using System.Collections
@using GedBlazor.Models

@if (Proband == null || Individuals == null)
{
    <div class="alert alert-info">Vælg venligst en proband for at se slægtstræet.</div>
}
else
{
    <RadzenTree Data="@individuals"
                Style="height: auto">
        <RadzenTreeLevel TextProperty="FullName" 
                         ChildrenProperty="Ancestors" 
                         Expanded=@ShouldExpand
                         HasChildren="@(i => ((Individual)i).Ancestors.Any() )" />
    </RadzenTree>
}

@code {
    [Parameter]
    public Individual? Proband { get; set; }
    [Parameter]
    public Dictionary<string, Individual>? Individuals { get; set; }

    IEnumerable<Individual> individuals = [];

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        // Root the tree at the selected proband instead of filtering by a fixed Anenummer
        individuals = Proband != null ? new[] { Proband } : Array.Empty<Individual>();
    }
    
    bool ShouldExpand(object data)
    {
        var ind = data as Individual;
        if (ind is null || Proband is null) return false;
        var start = Proband.Anenummer > 0 ? Proband.Anenummer : 1;
        // Expand proband and immediate parents only
        return ind.Anenummer == start || ind.Anenummer == 2 * start || ind.Anenummer == 2 * start + 1;
    }
}
