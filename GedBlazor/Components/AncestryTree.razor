@using System.Collections
@using GedBlazor.Models
@inject DialogService DialogService

@if (Proband == null || Individuals == null)
{
    <div class="alert alert-info">Vælg venligst en proband for at se slægtstræet.</div>
}
else
{
    <RadzenTree Data="@individuals"
                Style="height: auto">
        <RadzenTreeLevel ChildrenProperty="Ancestors" 
                         HasChildren="@(o => (((o as Radzen.Blazor.RadzenTreeItem)?.Value as Individual) ?? (o as Individual))?.Ancestors?.Any() == true)"
                         Expanded=@ShouldExpand>
            <Template Context="data">
                @{var ind = data.Value as Individual; }
                @if (ind != null)
                {
                    <a class="no-underline" href="#" @onclick:preventDefault @onclick="() => ShowRaw(ind)" title="Vis rå GED">
                        <span style="display:inline-block;width:0.6rem;height:0.6rem;border-radius:50%;background-color:@GetStatusColor(ind);margin-right:0.35rem;"></span>
                        @ind.FullName
                    </a>
                }
            </Template>
        </RadzenTreeLevel>
    </RadzenTree>
}

@code {
    [Parameter]
    public Individual? Proband { get; set; }
    [Parameter]
    public Dictionary<string, Individual>? Individuals { get; set; }

    IEnumerable<Individual> individuals = [];

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        individuals = Proband != null ? new[] { Proband } : Array.Empty<Individual>();
    }
    
    bool ShouldExpand(object data)
    {
        var ind = data as Individual;
        if (ind is null || Proband is null) return false;
        var start = Proband.Anenummer > 0 ? Proband.Anenummer : 1;
        return ind.Anenummer == start || ind.Anenummer == 2 * start || ind.Anenummer == 2 * start + 1;
    }

    private async Task ShowRaw(Individual ind)
    {
        await DialogService.OpenAsync<RawGedPopup>($"RAW GED – {ind.FullName}", new Dictionary<string, object>
        {
            ["Individual"] = ind
        }, new DialogOptions
        {
            ShowClose = true,
            CloseDialogOnOverlayClick = true,
            Width = "700px",
            Resizable = true,
            Draggable = true
        });
    }

    private string GetStatusColor(Individual ind)
    {
        return ind.CompletionStatus < 2 ? "#dc3545" : (ind.CompletionStatus == 2 ? "#ffc107" : "#28a745");
    }
}
