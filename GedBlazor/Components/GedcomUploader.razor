@using Microsoft.AspNetCore.Components.Forms
@using GedBlazor.Models
@using GedBlazor.Parsers
@using GedBlazor.Components
@inject IGedcomParser Parser

<div class="gedcom-uploader container-fluid px-1">
    <h2>GEDCOM Viser</h2>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <div class="row">
        <div class="col-12">
            <InputFile OnChange="@HandleFileSelected" class="form-control" accept=".ged" />
            <p class="mt-2">Træk GEDCOM-fil hertil eller klik for at vælge (kun .ged filer)</p>
        </div>
    </div>

    @if (individuals?.Count > 0)
    {
        <div class="mb-3">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "table" ? "active" : "")" href="#" @onclick='() => SetTab("table")'>Personer</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "tree" ? "active" : "") @(string.IsNullOrEmpty(probandId) ? "disabled" : "")" href="#" @onclick='() => SetTab("tree")'>Slægtstræ</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(activeTab == "anetavle" ? "active" : "") @(string.IsNullOrEmpty(probandId) ? "disabled" : "")" href="#" @onclick='() => SetTab("anetavle")'>Anetavle</a>
                </li>
            </ul>
        </div>
        @if (activeTab == "table")
        {
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="probandSelect" class="form-label">Vælg proband (rodperson):</label>
                    <select id="probandSelect" class="form-select" @onchange="OnProbandChanged">
                        <option value="">-- Vælg --</option>
                        @foreach (var ind in individuals.Values.OrderBy(i => i.FullName))
                        {
                            <option value="@ind.Id" selected="@(ind.Id == probandId ? "selected" : null)">@ind.FullName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="table-responsive" style="margin-left:0.5rem;margin-right:0.5rem;">
                <table class="table table-striped custom-zebra-table w-100 mt-4">
                    <thead>
                        <tr>
                            <th style="width: 7%;" @onclick='() => SortBy("Anenummer")'>Anenummer</th>
                            <th style="width: 23%;" @onclick='() => SortBy("FullName")'>Navn</th>
                            <th style="width: 23%;" @onclick='() => SortBy("BirthDate")'>Fødsel</th>
                            <th style="width: 23%;" @onclick='() => SortBy("DeathDate")'>Død</th>
                            <th style="width: 24%;" @onclick='() => SortBy("Father")'>Far / mor</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var individual in GetSortedIndividuals().Select((ind, idx) => new { ind, idx }))
                        {
                            var rowClass = (individual.idx % 2 == 1) ? "even-row" : string.Empty;
                            <tr class="@rowClass">
                                <td class="align-top">@(individual.ind.Anenummer > 0 ? individual.ind.Anenummer.ToString() : "")</td>
                                <td class="align-top">@individual.ind.FullName</td>
                                <td>
                                    @if (individual.ind.BirthDate != null || !string.IsNullOrEmpty(individual.ind.BirthPlace))
                                    {
                                        <div class="fw-medium">@(individual.ind.BirthDate?.ToString() ?? "")</div>
                                        @if (!string.IsNullOrEmpty(individual.ind.BirthPlace))
                                        {
                                            <div class="text-muted small text-wrap">@individual.ind.BirthPlace</div>
                                        }
                                    }
                                </td>
                                <td>
                                    @if (individual.ind.DeathDate != null || !string.IsNullOrEmpty(individual.ind.DeathPlace))
                                    {
                                        <div class="fw-medium">@(individual.ind.DeathDate?.ToString() ?? "")</div>
                                        @if (!string.IsNullOrEmpty(individual.ind.DeathPlace))
                                        {
                                            <div class="text-muted small text-wrap">@individual.ind.DeathPlace</div>
                                        }
                                    }
                                </td>
                                <td>
                                    @{
                                        var father = !string.IsNullOrEmpty(individual.ind.FatherId) && individuals.TryGetValue(individual.ind.FatherId, out var f) ? f.FullName : null;
                                        var mother = !string.IsNullOrEmpty(individual.ind.MotherId) && individuals.TryGetValue(individual.ind.MotherId, out var m) ? m.FullName : null;
                                    }
                                    <div>@father</div>
                                    <div>@mother</div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else if (activeTab == "tree" && !string.IsNullOrEmpty(probandId) && individuals.TryGetValue(probandId, out var proband))
        {
            <AncestryTree proband="@proband" individuals="@individuals" />
        }
        else if (activeTab == "anetavle" && !string.IsNullOrEmpty(probandId) && individuals.TryGetValue(probandId, out var anetavleProband))
        {
            <AnetavleTable proband="@anetavleProband" individuals="@individuals" />
        }
    }
</div>

@code {
    private Dictionary<string, Individual>? individuals;
    private string? errorMessage;
    private string? probandId;
    private string sortColumn = "GivenName";
    private bool sortAscending = true;
    private string activeTab = "table";

    private void SetTab(string tab) => activeTab = tab;

    private IEnumerable<Individual> GetSortedIndividuals()
    {
        if (individuals == null)
            return Enumerable.Empty<Individual>();
        var list = individuals.Values.AsEnumerable();
        return (sortColumn, sortAscending) switch
        {
            ("Anenummer", true) => list.OrderBy(i => i.Anenummer == -1 ? int.MaxValue : i.Anenummer),
            ("Anenummer", false) => list.OrderByDescending(i => i.Anenummer == -1 ? int.MinValue : i.Anenummer),
            ("FullName", true) => list.OrderBy(i => i.FullName),
            ("FullName", false) => list.OrderByDescending(i => i.FullName),
            ("BirthDate", true) => list.OrderBy(i => i.BirthDate),
            ("BirthDate", false) => list.OrderByDescending(i => i.BirthDate),
            ("DeathDate", true) => list.OrderBy(i => i.DeathDate),
            ("DeathDate", false) => list.OrderByDescending(i => i.DeathDate),
            ("Father", true) => list.OrderBy(i => i.FatherId != null && individuals.TryGetValue(i.FatherId, out var f) ? f.FullName : ""),
            ("Father", false) => list.OrderByDescending(i => i.FatherId != null && individuals.TryGetValue(i.FatherId, out var f) ? f.FullName : ""),
            ("Mother", true) => list.OrderBy(i => i.MotherId != null && individuals.TryGetValue(i.MotherId, out var m) ? m.FullName : ""),
            ("Mother", false) => list.OrderByDescending(i => i.MotherId != null && individuals.TryGetValue(i.MotherId, out var m) ? m.FullName : ""),
            _ => list.OrderBy(i => i.FullName),
        };
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = null;
            var file = e.File;

            if (!file.Name.EndsWith(".ged", StringComparison.OrdinalIgnoreCase))
            {
                errorMessage = "Vælg venligst en gyldig GEDCOM-fil (.ged)";
                return;
            }

            using var reader = new StreamReader(file.OpenReadStream());
            var content = await reader.ReadToEndAsync();
            (individuals, _) = Parser.Parse(content);
            probandId = null;
            if (individuals != null)
                Parser.AssignAnenummer(individuals, null);
            if (individuals == null || individuals.Count == 0)
            {
                errorMessage = "Ingen personer fundet i GEDCOM-filen";
            }
        }
        catch (FormatException)
        {
            errorMessage = "Ugyldigt GEDCOM-filformat";
            individuals = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl under behandling af fil: {ex.Message}";
            individuals = null;
        }
    }

    private void OnProbandChanged(ChangeEventArgs e)
    {
        probandId = e.Value?.ToString();
        if (individuals != null && !string.IsNullOrEmpty(probandId))
            Parser.AssignAnenummer(individuals, probandId);
        else if (individuals != null)
            Parser.AssignAnenummer(individuals, null);
    }
}